#include <iostream>
using namespace std;
//Nhập mảng có n phần tử
void NhapMang(int a[], int n) {

	for (int i = 0; i < n; i++) {
		cout << "A[" << i << "]: ";
		cin >> a[i];

	}

}
//Xuất mảng có n phần tử
void XuatMang(int a[], int n) {
	for (int i = 0; i < n; i++) {

		cout << "A[" << i << "]: " << a[i] << "   ";

	}


}

//Tìm kiếm tuyến tính 
int LinearSearch(int a[], int n, int x) {
	for (int i = 0; i < n; i++) {
		if (a[i] == x)
			return i;


	}
	return -1;
}


//Xài tìm kiếm tuyến tính mà cải tiến giải thuật lên miếng >>> LINEARSEARCH 1 !!!
int LinearSearch1(int arr[], int n, int x) {
	int i = 0;
	while (arr[i] != x && arr[n - 1 - i] != x && i < n / 2)

		i++;

	if (arr[i] == x)
		return i;

	if (arr[n - 1 - i] == x)

		return (n - 1 - i);

	return -1;
}
//Tìm kiếm tuyến tính sử dụng lính canh >>>> LINEARSEARCH 2 !!!!
int LinearSearch2(int a[], int n, int x) {

	int i = 0;
	a[n] = x;
	while (a[i] != x)
		i++;
	if (i < n)
		return i;
	return -1;
}
//trước khi làm binarysearch thì phải sắp xếp nèk
void Sapxep(int a[], int n) {
	int temp = 0;
	for (int i = 0; i < n - 1; i++)
	{
		for (int j = i + 1; j < n; j++) {
			if (a[i] > a[j]) {
				//swap nhe ae
				temp = a[i];
				a[i] = a[j];
				a[j] = temp;

			}
		}

	}

}
// tìm kiếm nhị phân nè 
int BinarySearch(int a[], int left, int right, int x) {
	int mid = 0;
	while (left <= right) {
		// Tìm kiếm từ ở giữa trước 
		mid = (left + right) / 2;
		// Nếu phần từ ở giữa bằng x thì cái cần tìm là nó luôn quá phẻ 
		if (a[mid] == x)
			return mid;
		// Nếu x lớn hơn phần tử ở giữa thì chắc chắn nó nằm bên phải, k phải bên phải k lấy tiền
		// Chỉ định left phần từ ở giữa + 1
		if (x > a[mid])
			left = mid + 1;
		else
			//Cái này là trường hợp nguợc lại
			right = mid - 1;
	}
	//Trả về -1 nếu không tìm thấy gia  trị trong mảng.
	return -1;
}
void ShakerSort(int a[], int n) {
	int temp1 = 0;
	int temp2 = 0;
	int left = 0; int right = n - 1; int k = n - 1;
	while (left < right) {
		for (int i = right; i > left; i--) {
			if (a[i - 1] > a[i]) {
				//swap 
				temp1 = a[i - 1];
				a[i - 1] = a[i];
				a[i] = temp1;
				k = i;
			}
		} left = k;
		for (int j = left; j < right; j++) {
			if (a[j] > a[j + 1]) {
				temp2 = a[j];
				a[j] = a[j + 1];
				a[j + 1] = temp2;
				k = j;
			}
		}
		right = k;
	}
}
void SelectionSort(int arr[], int  n) {
	int  temp = 0;
	int min;
	for (int i = 0; i < n - 1; i++) {
		min = i;
		for (int j = i + 1; j < n; j++)
			if (arr[j] < arr[min])
				min = j;
		temp = arr[i];
		arr[i] = arr[min];
		arr[min] = temp;

	}
}

void InterchangeSort(int a[], int n) {
	int temp = 0;
	for (int i = 0; i < n - 1; i++) {
		for (int j = i + 1; j < n; j++) {
			if (a[i] > a[j]) {
				temp = a[i];
				a[i] = a[j];
				a[j] = temp;
			}
		}
	}
}



		//chương trình chính
		int main() {


			int a[100];
			int n;
			int x;


			do {
				cout << "Nhap n: ";
				cin >> n;
				if (n < 5 || n>100) {
					cout << "Nhap sai, vui long nhap (5<=n<=100)  !! " << endl;
				}
			} while (n < 5 || n>100);
			NhapMang(a, n);
			cout << "Mang sau khi nhap: " << endl;
			XuatMang(a, n);
			cout << "Nhap phan tu x muon tim kiem: ";
			cin >> x;

			//ĐÂY LÀ SỬ DỤNG LINEARSEARCH ĐỂ TÌM KIẾM  
			cout << "Su dung LinearSearch: " << endl;
			int idx = LinearSearch(a, n, x);
			if (idx == -1) {
				cout << "Khong thay phan tu" << x << " trong mang";
			}
			else cout << "Tim thay phan tu " << x << " trong mang tai vi tri A[" << idx << "]";
			cout << endl << endl;


			// ĐÂY LÀ SỬ DỤNG LINEARSEARCH  1 ĐỂ TÌM KIẾM ^^
			cout << "Su dung LinearSearch1: " << endl;
			int idx1 = LinearSearch1(a, n, x);
			if (idx1 == -1) {
				cout << "Khong thay phan tu" << x << " trong mang";
			}
			else cout << "Tim thay phan tu " << x << " trong mang tai vi tri A[" << idx1 << "]";
			cout << endl << endl;


			// ĐÂY LÀ SỬ DỤNG LINEARSEARCH 2  ĐỂ TÌM KIẾM ^^
			cout << "Su dung LinearSearch2: " << endl;
			int idx2 = LinearSearch2(a, n, x);
			if (idx2 == -1) {
				cout << "Khong thay phan tu" << x << "trong mang";
			}
			else cout << "Tim thay phan tu " << x << "trong mang tai vi tri A[" << idx2 << "]";
			cout << endl << endl;


			// PHẢI SẮP XẾP MẢNG TRƯỚC KHI MÀ XÀI CÁI BINARYSEARCH @@
			cout << "Mang sau khi sap xep: " << endl;
			Sapxep(a, n);


			// SỬ DỤNG BINARYSEARCH ĐỂ SẮP XẾP 
			cout << "Su dung BinarySearch ne: " << endl;
			int idx3 = BinarySearch(a, 0, n - 1, x);
			if (idx3 == -1) {
				cout << " Khong tim thay phan tu " << x << " trong mang !";

			}
			else cout << "Da tim thay phan tu " << x << " trong mang tai vi tri A[" << idx3 << "]";
			cout << endl << endl;
		}
